<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="top.zywork.dao.UserBonusDAO">

    <insert id="save" parameterType="userBonusDO">
        insert into t_bonus_accounts
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="bonusAccountsUid != null">
				uid,
			</if>
			<if test="bonusAccountsBonusName != null">
				bonus_name,
			</if>
			<if test="bonusAccountsTotal != null">
				total,
			</if>
			<if test="bonusAccountsUpdatedDate != null">
				updated_date,
			</if>
			
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="bonusAccountsUid != null">
				#{bonusAccountsUid},
			</if>
			<if test="bonusAccountsBonusName != null">
				#{bonusAccountsBonusName},
			</if>
			<if test="bonusAccountsTotal != null">
				#{bonusAccountsTotal},
			</if>
			<if test="bonusAccountsUpdatedDate != null">
				#{bonusAccountsUpdatedDate},
			</if>
			
        </trim>
    </insert>

    <delete id="remove" parameterType="userBonusDO">
        delete from t_bonus_accounts where id = #{bonusAccountsId}
    </delete>

    <delete id="removeById" parameterType="long">
        delete from t_bonus_accounts where id = #{id}
    </delete>

    <delete id="removeByIds">
        delete from t_bonus_accounts where id in
        <foreach item="id" collection="array" separator="," open="(" close=")">
            #{id}
        </foreach>
    </delete>

    <update id="update" parameterType="userBonusDO">
        update t_bonus_accounts
        <set>
            <if test="bonusAccountsUid != null">
				uid = #{bonusAccountsUid},
			</if>
			<if test="bonusAccountsBonusName != null">
				bonus_name = #{bonusAccountsBonusName},
			</if>
			<if test="bonusAccountsTotal != null">
				total = #{bonusAccountsTotal},
			</if>
			<if test="bonusAccountsUpdatedDate != null">
				updated_date = #{bonusAccountsUpdatedDate},
			</if>
			
        </set>
        where id = #{bonusAccountsId}
    </update>

    <update id="updateActiveStatus" parameterType="top.zywork.query.StatusQuery">
        update t_bonus_accounts set is_active = #{status} where id = #{id}
    </update>

    <update id="updateActiveStatuses" parameterType="top.zywork.query.StatusQueries">
        update t_bonus_accounts set is_active = #{status} where id in
        <foreach item="id" collection="ids" separator="," open="(" close=")">
            #{id}
        </foreach>
    </update>

    <sql id="select_columns">
        t_bonus_accounts.id as bonusAccountsId, t_bonus_accounts.uid as bonusAccountsUid, t_bonus_accounts.bonus_name as bonusAccountsBonusName, t_bonus_accounts.total as bonusAccountsTotal, t_bonus_accounts.updated_date as bonusAccountsUpdatedDate, t_user.id as userId, t_user.phone as userPhone, t_user.nickname as userNickname, t_user.headicon as userHeadicon
    </sql>

    <sql id="query_where_clause">
        <if test="query != null and query.bonusAccountsId != null">
			t_bonus_accounts.id = #{query.bonusAccountsId}
		</if>
		<if test="query != null and query.bonusAccountsUid != null">
			and t_bonus_accounts.uid = #{query.bonusAccountsUid}
		</if>
		<if test="query != null and query.bonusAccountsBonusName != null and query.bonusAccountsBonusName != ''">
			and t_bonus_accounts.bonus_name like concat('%', #{query.bonusAccountsBonusName}, '%')
		</if>
		<if test="query != null and query.bonusAccountsTotal != null">
			and t_bonus_accounts.total = #{query.bonusAccountsTotal}
		</if>
		<if test="query != null and query.bonusAccountsUpdatedDateStart != null and query.bonusAccountsUpdatedDateEnd == null">
			and t_bonus_accounts.updated_date <![CDATA[ >= ]]> #{query.bonusAccountsUpdatedDateStart}
		</if>
		<if test="query != null and query.bonusAccountsUpdatedDateStart == null and query.bonusAccountsUpdatedDateEnd != null">
			and t_bonus_accounts.updated_date <![CDATA[ <= ]]> #{query.bonusAccountsUpdatedDateEnd}
		</if>
		<if test="query != null and query.bonusAccountsUpdatedDateStart != null and query.bonusAccountsUpdatedDateEnd != null">
			and t_bonus_accounts.updated_date <![CDATA[ >= ]]> #{query.bonusAccountsUpdatedDateStart} and t_bonus_accounts.updated_date <![CDATA[ <= ]]> #{query.bonusAccountsUpdatedDateEnd}
		</if>
		<if test="query != null and query.userId != null">
			and t_user.id = #{query.userId}
		</if>
		<if test="query != null and query.userPhone != null and query.userPhone != ''">
			and t_user.phone like concat('%', #{query.userPhone}, '%')
		</if>
		<if test="query != null and query.userNickname != null and query.userNickname != ''">
			and t_user.nickname like concat('%', #{query.userNickname}, '%')
		</if>
		<if test="query != null and query.userHeadicon != null and query.userHeadicon != ''">
			and t_user.headicon like concat('%', #{query.userHeadicon}, '%')
		</if>
		
        and
        t_user.id = t_bonus_accounts.uid
    </sql>

    <select id="getById" parameterType="long" resultType="userBonusDO">
        select
        <include refid="select_columns"/>
        from t_bonus_accounts, t_user where t_bonus_accounts.id = #{id} and
        t_user.id = t_bonus_accounts.uid
    </select>

    <select id="listAll" resultType="userBonusDO">
        select
        <include refid="select_columns"/>
        from t_bonus_accounts, t_user
        where
        t_user.id = t_bonus_accounts.uid
        order by t_bonus_accounts.updated_date desc
    </select>

    <select id="listPage" parameterType="top.zywork.query.PageQuery" resultType="userBonusDO">
        select
        <include refid="select_columns"/>
        from t_bonus_accounts, t_user
        where
        t_user.id = t_bonus_accounts.uid
        order by
        <if test="sort != null and sort != ''">
            ${sort} ${order}
        </if>
        <if test="sort == null or sort == ''">
            t_bonus_accounts.updated_date desc
        </if>
        limit #{beginIndex}, #{pageSize}
    </select>

    <select id="count" resultType="long">
        select count(*) from t_bonus_accounts, t_user
        where
        t_user.id = t_bonus_accounts.uid
    </select>

    <select id="listPageByCondition" resultType="userBonusDO">
        select
        <include refid="select_columns"/>
        from t_bonus_accounts, t_user
        <where>
            <include refid="query_where_clause"/>
        </where>
        order by
        <if test="pager.sort != null and pager.sort != ''">
            ${pager.sort} ${pager.order}
        </if>
        <if test="pager.sort == null or pager.sort == ''">
            t_bonus_accounts.updated_date desc
        </if>
        limit #{pager.beginIndex}, #{pager.pageSize}
    </select>

    <select id="countByCondition" resultType="long">
        select count(*) from t_bonus_accounts, t_user
        <where>
            <include refid="query_where_clause"/>
        </where>
    </select>

</mapper>

<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="top.zywork.dao.BankCardDAO">

    <insert id="save" parameterType="bankCardDO">
        insert into t_bank_card
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="bankName != null">
				bank_name,
			</if>
			<if test="cardNo != null">
				card_no,
			</if>
			<if test="realName != null">
				real_name,
			</if>
			<if test="phone != null">
				phone,
			</if>
			<if test="userId != null">
				user_id,
			</if>
			<if test="createTime != null">
				create_time,
			</if>
			<if test="updateTime != null">
				update_time,
			</if>
			
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="bankName != null">
				#{bankName},
			</if>
			<if test="cardNo != null">
				#{cardNo},
			</if>
			<if test="realName != null">
				#{realName},
			</if>
			<if test="phone != null">
				#{phone},
			</if>
			<if test="userId != null">
				#{userId},
			</if>
			<if test="createTime != null">
				#{createTime},
			</if>
			<if test="updateTime != null">
				#{updateTime},
			</if>
			
        </trim>
    </insert>

    <delete id="remove" parameterType="bankCardDO">
        delete from t_bank_card where id = #{id}
    </delete>

    <delete id="removeById" parameterType="long">
        delete from t_bank_card where id = #{id}
    </delete>

    <delete id="removeByIds">
        delete from t_bank_card where id in
        <foreach item="id" collection="array" separator="," open="(" close=")">
            #{id}
        </foreach>
    </delete>

    <update id="update" parameterType="bankCardDO">
        update t_bank_card
        <set>
            <if test="bankName != null">
				bank_name = #{bankName},
			</if>
			<if test="cardNo != null">
				card_no = #{cardNo},
			</if>
			<if test="realName != null">
				real_name = #{realName},
			</if>
			<if test="phone != null">
				phone = #{phone},
			</if>
			<if test="userId != null">
				user_id = #{userId},
			</if>
			<if test="createTime != null">
				create_time = #{createTime},
			</if>
			<if test="updateTime != null">
				update_time = #{updateTime},
			</if>
			
        </set>
        where id = #{id}
    </update>

    <update id="updateActiveStatus" parameterType="top.zywork.query.StatusQuery">
        update t_bank_card set is_active = #{status} where id = #{id}
    </update>

    <update id="updateActiveStatuses" parameterType="top.zywork.query.StatusQueries">
        update t_bank_card set is_active = #{status} where id in
        <foreach item="id" collection="ids" separator="," open="(" close=")">
            #{id}
        </foreach>
    </update>

    <sql id="select_columns">
        id as id, bank_name as bankName, card_no as cardNo, real_name as realName, phone as phone, user_id as userId, create_time as createTime, update_time as updateTime
    </sql>

    <sql id="query_where_clause">
        <if test="query != null and query.id != null">
			id = #{query.id}
		</if>
		<if test="query != null and query.bankName != null and query.bankName != ''">
			and bank_name like concat('%', #{query.bankName}, '%')
		</if>
		<if test="query != null and query.cardNo != null and query.cardNo != ''">
			and card_no like concat('%', #{query.cardNo}, '%')
		</if>
		<if test="query != null and query.realName != null and query.realName != ''">
			and real_name like concat('%', #{query.realName}, '%')
		</if>
		<if test="query != null and query.phone != null and query.phone != ''">
			and phone like concat('%', #{query.phone}, '%')
		</if>
		<if test="query != null and query.userId != null">
			and user_id = #{query.userId}
		</if>
		<if test="query != null and query.createTimeStart != null and query.createTimeEnd == null">
			and create_time <![CDATA[ >= ]]> #{query.createTimeStart}
		</if>
		<if test="query != null and query.createTimeStart == null and query.createTimeEnd != null">
			and create_time <![CDATA[ <= ]]> #{query.createTimeEnd}
		</if>
		<if test="query != null and query.createTimeStart != null and query.createTimeEnd != null">
			and create_time <![CDATA[ >= ]]> #{query.createTimeStart} and create_time <![CDATA[ <= ]]> #{query.createTimeEnd}
		</if>
		<if test="query != null and query.updateTimeStart != null and query.updateTimeEnd == null">
			and update_time <![CDATA[ >= ]]> #{query.updateTimeStart}
		</if>
		<if test="query != null and query.updateTimeStart == null and query.updateTimeEnd != null">
			and update_time <![CDATA[ <= ]]> #{query.updateTimeEnd}
		</if>
		<if test="query != null and query.updateTimeStart != null and query.updateTimeEnd != null">
			and update_time <![CDATA[ >= ]]> #{query.updateTimeStart} and update_time <![CDATA[ <= ]]> #{query.updateTimeEnd}
		</if>
		
    </sql>

    <select id="getById" parameterType="long" resultType="bankCardDO">
        select
        <include refid="select_columns"/>
        from t_bank_card where id = #{id}
    </select>

    <select id="listAll" resultType="bankCardDO">
        select
        <include refid="select_columns"/>
        from t_bank_card
        order by update_time desc, create_time desc
    </select>

    <select id="listPage" parameterType="top.zywork.query.PageQuery" resultType="bankCardDO">
        select
        <include refid="select_columns"/>
        from t_bank_card
        order by
        <if test="sort != null and sort != ''">
            ${sort} ${order}
        </if>
        <if test="sort == null or sort == ''">
            update_time desc, create_time desc
        </if>
        limit #{beginIndex}, #{pageSize}
    </select>

    <select id="count" resultType="long">
        select count(*) from t_bank_card
    </select>

    <select id="listPageByCondition" resultType="bankCardDO">
        select
        <include refid="select_columns"/>
        from t_bank_card
        <where>
            <include refid="query_where_clause"/>
        </where>
        order by
        <if test="pager.sort != null and pager.sort != ''">
            ${pager.sort} ${pager.order}
        </if>
        <if test="pager.sort == null or pager.sort == ''">
            update_time desc, create_time desc
        </if>
        limit #{pager.beginIndex}, #{pager.pageSize}
    </select>

    <select id="countByCondition" resultType="long">
        select count(*) from t_bank_card
        <where>
            <include refid="query_where_clause"/>
        </where>
    </select>

</mapper>
